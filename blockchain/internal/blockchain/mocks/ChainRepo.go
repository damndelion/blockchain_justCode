// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	sync "sync"

	mock "github.com/stretchr/testify/mock"
)

// ChainRepo is an autogenerated mock type for the ChainRepo type
type ChainRepo struct {
	mock.Mock
}

// CreateWallet provides a mock function with given fields: ctx, userID
func (_m *ChainRepo) CreateWallet(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *ChainRepo) GetBalance(ctx context.Context, userID string) (float64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceByAddress provides a mock function with given fields: _a0, address
func (_m *ChainRepo) GetBalanceByAddress(_a0 context.Context, address string) (float64, error) {
	ret := _m.Called(_a0, address)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceByAddress")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(_a0, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(_a0, address)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalanceUSD provides a mock function with given fields: ctx, userID
func (_m *ChainRepo) GetBalanceUSD(ctx context.Context, userID string) (float64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalanceUSD")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWallet provides a mock function with given fields: ctx, userID
func (_m *ChainRepo) GetWallet(ctx context.Context, userID string) (string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWallets provides a mock function with given fields: _a0
func (_m *ChainRepo) GetWallets(_a0 context.Context) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWallets")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: ctx, from, to, amount, wg
func (_m *ChainRepo) Send(ctx context.Context, from string, to string, amount float64, wg *sync.WaitGroup) error {
	ret := _m.Called(ctx, from, to, amount, wg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64, *sync.WaitGroup) error); ok {
		r0 = rf(ctx, from, to, amount, wg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TopUp provides a mock function with given fields: ctx, from, to, amount, wg
func (_m *ChainRepo) TopUp(ctx context.Context, from string, to string, amount float64, wg *sync.WaitGroup) error {
	ret := _m.Called(ctx, from, to, amount, wg)

	if len(ret) == 0 {
		panic("no return value specified for TopUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64, *sync.WaitGroup) error); ok {
		r0 = rf(ctx, from, to, amount, wg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChainRepo creates a new instance of ChainRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChainRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChainRepo {
	mock := &ChainRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
