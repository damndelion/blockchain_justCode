basePath: /
definitions:
  dto.UserCreateCredRequest:
    properties:
      card_num:
        type: string
      cvv:
        type: string
      type:
        type: string
      userID:
        type: integer
    required:
    - card_num
    - cvv
    - type
    - userID
    type: object
  dto.UserCreateInfoRequest:
    properties:
      address:
        type: string
      age:
        maximum: 120
        minimum: 1
        type: integer
      city:
        type: string
      country:
        type: string
      phone:
        type: string
      userID:
        type: integer
    required:
    - address
    - age
    - city
    - country
    - phone
    - userID
    type: object
  dto.UserCreateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        default: user
        type: string
      valid:
        default: false
        type: boolean
      wallet:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserDetailRequest:
    properties:
      address:
        type: string
      age:
        maximum: 120
        minimum: 1
        type: integer
      card_num:
        type: string
      card_type:
        type: string
      city:
        type: string
      country:
        type: string
      cvv:
        type: string
      phone:
        type: string
    required:
    - address
    - age
    - card_num
    - card_type
    - city
    - country
    - cvv
    - phone
    type: object
  dto.UserUpdateCredRequest:
    properties:
      card_num:
        type: string
      cvv:
        type: string
      type:
        type: string
    required:
    - card_num
    - cvv
    - type
    type: object
  dto.UserUpdateInfoRequest:
    properties:
      address:
        type: string
      age:
        maximum: 120
        minimum: 1
        type: integer
      city:
        type: string
      country:
        type: string
      phone:
        type: string
    required:
    - address
    - age
    - city
    - country
    - phone
    type: object
  dto.UserUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        default: user
        type: string
      valid:
        default: false
        type: boolean
      wallet:
        type: string
    required:
    - email
    - name
    - password
    - wallet
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Service that does CRUD operations on user
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User service
  version: "1.0"
paths:
  /v1/admin/all:
    get:
      consumes:
      - application/json
      description: Retrieve a list of users from the system
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Filter column name
        in: query
        name: filter
        type: string
      - description: Filter value
        in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a list of all users
      tags:
      - Users
  /v1/admin/all/search:
    get:
      consumes:
      - application/json
      description: Retrieve a user by searching value
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Search column
        in: query
        name: search
        required: true
        type: string
      - description: Search value
        in: query
        name: value
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a users with search
      tags:
      - Users
  /v1/admin/all/sort:
    get:
      consumes:
      - application/json
      description: Retrieve a user by sorting
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Sort value
        in: query
        name: sort
        required: true
        type: string
      - description: Ascending or Descending
        in: query
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a users with sort
      tags:
      - Users
  /v1/admin/cred:
    get:
      description: Get a list of all user credentials
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Filter column name
        in: query
        name: filter
        type: string
      - description: Filter value
        in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users // @Tags Users credentials
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a list of all user credentials
      tags:
      - Users Credentials
    put:
      consumes:
      - application/json
      description: Create user credentials
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: JSON data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateCredRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create user credentials
      tags:
      - Users Credentials
  /v1/admin/cred/{id}:
    delete:
      description: Delete user credentials by user id
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete user credentials by user id
      tags:
      - Users Credentials
    get:
      description: Retrieve a user credentials by their unique ID
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User credentials
          schema:
            type: user
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user credentials by ID
      tags:
      - Users Credentials
    post:
      consumes:
      - application/json
      description: Update user credentials
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      - description: JSON data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateCredRequest'
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update user credentials
      tags:
      - Users Credentials
  /v1/admin/cred/search:
    get:
      description: Retrieve a user credentials by searching value
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Search column
        in: query
        name: search
        required: true
        type: string
      - description: Search value
        in: query
        name: value
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User credentials
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a users credentials with search
      tags:
      - Users Credentials
  /v1/admin/cred/sort:
    get:
      description: Retrieve a user credentials by sorting
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Sort column
        in: query
        name: sort
        required: true
        type: string
      - description: Ascending or Descending
        in: query
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User credentials
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a users credentials with sort
      tags:
      - Users Credentials
  /v1/admin/email:
    get:
      consumes:
      - application/json
      description: Retrieve a user by their email address
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Email address of the user
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user by email
      tags:
      - Users
  /v1/admin/info:
    get:
      description: Get a list of all user information
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Filter column name
        in: query
        name: filter
        type: string
      - description: Filter value
        in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users information
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a list of all user information
      tags:
      - Users Information
    put:
      consumes:
      - application/json
      description: Create user information
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: JSON data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create user information
      tags:
      - Users Information
  /v1/admin/info/{id}:
    delete:
      description: Delete user information by user id
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete user information by user id
      tags:
      - Users Information
    get:
      description: Retrieve a user information by their unique ID
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            type: user
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user information by ID
      tags:
      - Users Information
    post:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      - description: JSON data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateInfoRequest'
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update user information
      tags:
      - Users Information
  /v1/admin/info/search:
    get:
      description: Retrieve a user information by searching value
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Search column
        in: query
        name: search
        required: true
        type: string
      - description: Search value
        in: query
        name: value
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a users information with search
      tags:
      - Users Information
  /v1/admin/info/sort:
    get:
      description: Retrieve a user information by sorting
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: Sort value
        in: query
        name: sort
        required: true
        type: string
      - description: Ascending or Descending
        in: query
        name: method
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            type: users
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a users information with sort
      tags:
      - Users Information
  /v1/admin/user:
    put:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: JSON data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: int
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create user
      tags:
      - Users
  /v1/admin/user/{id}:
    delete:
      description: Delete user by id and linked info and cred
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete user by id
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their unique ID
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            type: user
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: ID of the item
        in: path
        name: id
        required: true
        type: integer
      - description: JSON data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update user
      tags:
      - Users
  /v1/user:
    get:
      consumes:
      - application/json
      description: Retrieve a user by their authorization token
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            type: user
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user by jwt token
      tags:
      - Users
  /v1/user/cred:
    get:
      consumes:
      - application/json
      description: Retrieve a user credentials by their authorization token
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User credentials
          schema:
            type: user
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user credentials by jwt token
      tags:
      - Users Credentials
  /v1/user/info:
    get:
      consumes:
      - application/json
      description: Retrieve a user information by their authorization token
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            type: user
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a user information by jwt token
      tags:
      - Users Information
    post:
      consumes:
      - application/json
      description: Creates user info and cred, sets users valid to true
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: JSON data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create both user info and cred
      tags:
      - Users Information
    put:
      consumes:
      - application/json
      description: Update user info and cred
      parameters:
      - description: JWT token
        in: header
        name: authorization
        required: true
        type: string
      - description: JSON data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UserDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update both user info and cred
      tags:
      - Users Information
schemes:
- http
swagger: "2.0"
